// Dungreed모작.cpp : 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"
#include "Renderer.h"
#include "Timer.h"
#include "Dungreed모작.h"


#define MAX_LOADSTRING 100

// 전역 변수:
HINSTANCE hInst;                                // 현재 인스턴스입니다.
WCHAR szTitle[MAX_LOADSTRING];                  // 제목 표시줄 텍스트입니다.
WCHAR szWindowClass[MAX_LOADSTRING];            // 기본 창 클래스 이름입니다.

// 이 코드 모듈에 들어 있는 함수의 정방향 선언입니다.
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

CRasterizer screen;
CBitMap		bitmap;
CBitMap		bitmap2;
Renderer    render;

//전역변수
HWND g_hWnd;
HDC m_hdc;
Bitmap*	g_image;

//타이머
CTimer mTimer;

void OnIdle();
void CalculateFrameStats();
int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);


    // TODO: 여기에 코드를 입력합니다.
	GdiplusStartupInput gdiplusStartupInput;
	ULONG_PTR           gdiplusToken;
	GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // 전역 문자열을 초기화합니다.
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_DUNGREED, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 응용 프로그램 초기화를 수행합니다.
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }
	HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_DUNGREED));
	MSG msg;

	mTimer.Reset();

	while (true)
	{
		::PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);
		const BOOL bIsTranslateMessage = TranslateAccelerator(msg.hwnd, hAccelTable, &msg);
		if (!bIsTranslateMessage)
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		mTimer.Tick();
		CalculateFrameStats();
		OnIdle();
		if (msg.message == WM_QUIT)
			break;

	}
   
	GdiplusShutdown(gdiplusToken);
    return (int) msg.wParam;
}



//
//  함수: MyRegisterClass()
//
//  목적: 창 클래스를 등록합니다.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_DUNGREED));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_DUNGREED);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   함수: InitInstance(HINSTANCE, int)
//
//   목적: 인스턴스 핸들을 저장하고 주 창을 만듭니다.
//
//   설명:
//
//        이 함수를 통해 인스턴스 핸들을 전역 변수에 저장하고
//        주 프로그램 창을 만든 다음 표시합니다.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, WINCX,WINCY, nullptr, nullptr, hInstance, nullptr);
   
   if (!hWnd)
   {
      return FALSE;
   }
   g_hWnd = hWnd;
   m_hdc = GetDC(hWnd);
   RECT clientRect;

   ::GetClientRect(hWnd, &clientRect);
   int iWidth = clientRect.right - clientRect.left + 1;
   int iHeight = clientRect.bottom - clientRect.top + 1;
   screen.CreateDIB(m_hdc, iWidth, iHeight);

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   //그림파일들
   bitmap.ReadBitMap("..//texture//1.bmp");
   bitmap2.ReadBitMap("..//texture//800x600.bmp");
   g_image = new Bitmap(L"..//texture//1.bmp");
   render.SetRasterizer(&screen);
   render.SetColorMask(mRGB(1.f, 0.f, 1.f));
   
   return TRUE;
}

//
//  함수: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  목적:  주 창의 메시지를 처리합니다.
//
//  WM_COMMAND  - 응용 프로그램 메뉴를 처리합니다.
//  WM_PAINT    - 주 창을 그립니다.
//  WM_DESTROY  - 종료 메시지를 게시하고 반환합니다.
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: 여기에 hdc를 사용하는 그리기 코드를 추가합니다.
            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// 정보 대화 상자의 메시지 처리기입니다.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

void OnIdle()
{
	screen.ClearScreen();
	/*screen.SetPixel(100, 100, mRGB(0.5f, 0.5f, 0.5f));
	screen.SetPixel(100, 101, mRGB(1.f,0,0));*/
	render.DrawBitMap(0,0, &bitmap2);

	Vertex p1(CVector2(200.f, 200.0f), CVector2(0.f,0.f), mRGB(1.f, 0.f, 0.f));
	Vertex p2(CVector2(200.f, 350.0f), CVector2(0.f,1.f), mRGB(0.f, 1.f, 0.f));
	Vertex p3(CVector2(400.f, 350.0f), CVector2(1.f,1.f), mRGB(0.f, 0.f, 1.f));
	Vertex p4(CVector2(400.f, 200.0f), CVector2(1.f,0.f), mRGB(0.f, 0.f, 1.f));

	//render.DrawTriangleBarycentric(p1, p2, p3);
	render.DrawTriangleBarycentric(p1, p2, p3, &bitmap);
	render.DrawTriangleBarycentric(p3, p4, p1, &bitmap);

	render.DrawBitMap(100, 100, &bitmap);
	//render.DrawTriangleBarycentric(p1, p2, p3, g_image);
	//render.DrawTriangleBarycentric(p3, p4, p1, g_image);
	screen.Present(&m_hdc);
}

void CalculateFrameStats()
{
	static int frameCnt = 0;
	static float timeElapsed = 0.0f;

	frameCnt++;

	if ((mTimer.TotalTIme() - timeElapsed) >= 1.0f)
	{
		float fps = (float)frameCnt; // fps = frameCnt / 1
		float mspf = 1000.0f / fps;

		TCHAR buffer[100];
		swprintf_s(buffer, TEXT("%s FPS : %f"), szTitle, fps);
		SetWindowText(g_hWnd, buffer);
		// Reset for next average.
		frameCnt = 0;
		timeElapsed += 1.0f;
	}
}